"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrettyLogger = void 0;
// We'll load these dynamically since they're ES modules
let chalk;
let boxen;
let ora;
let Table;
let figlet;
// Load dependencies dynamically
async function loadDependencies() {
    try {
        const imports = await Promise.all([
            Promise.resolve().then(() => __importStar(require('chalk'))),
            Promise.resolve().then(() => __importStar(require('boxen'))),
            Promise.resolve().then(() => __importStar(require('ora'))),
            Promise.resolve().then(() => __importStar(require('cli-table3'))),
            Promise.resolve().then(() => __importStar(require('figlet')))
        ]);
        [chalk, boxen, ora, Table, figlet] = imports.map(imp => imp.default);
        return true;
    }
    catch (error) {
        console.warn('Pretty logging dependencies not available, falling back to basic logging');
        return false;
    }
}
class PrettyLogger {
    static async init() {
        if (!this.initialized) {
            this.isLoaded = await loadDependencies();
            this.initialized = true;
        }
        return this.isLoaded;
    }
    static async showTitle(text) {
        if (!await this.init()) {
            console.log(text);
            return;
        }
        return new Promise((resolve, reject) => {
            figlet(text, (err, data) => {
                if (err) {
                    reject(err);
                    return;
                }
                if (data) {
                    console.log(chalk.cyan(data));
                }
                resolve();
            });
        });
    }
    static async info(message, data) {
        if (!await this.init()) {
            console.log(`ℹ ${message}`);
            if (data)
                console.log(data);
            return;
        }
        console.log(chalk.blue('ℹ'), chalk.blue(message));
        if (data) {
            console.log(boxen(JSON.stringify(data, null, 2), {
                padding: 1,
                margin: 1,
                borderStyle: 'round',
                borderColor: 'blue'
            }));
        }
    }
    static async success(message, data) {
        if (!await this.init()) {
            console.log(`✓ ${message}`);
            if (data)
                console.log(data);
            return;
        }
        console.log(chalk.green('✓'), chalk.green(message));
        if (data) {
            console.log(boxen(JSON.stringify(data, null, 2), {
                padding: 1,
                margin: 1,
                borderStyle: 'round',
                borderColor: 'green'
            }));
        }
    }
    static async error(message, error) {
        if (!await this.init()) {
            console.error(`✗ ${message}`);
            if (error)
                console.error(error);
            return;
        }
        console.log(chalk.red('✗'), chalk.red(message));
        if (error) {
            console.log(boxen(JSON.stringify(error, null, 2), {
                padding: 1,
                margin: 1,
                borderStyle: 'round',
                borderColor: 'red'
            }));
        }
    }
    static async warning(message, data) {
        if (!await this.init()) {
            console.warn(`⚠ ${message}`);
            if (data)
                console.warn(data);
            return;
        }
        console.log(chalk.yellow('⚠'), chalk.yellow(message));
        if (data) {
            console.log(boxen(JSON.stringify(data, null, 2), {
                padding: 1,
                margin: 1,
                borderStyle: 'round',
                borderColor: 'yellow'
            }));
        }
    }
    static async startSpinner(text) {
        if (!await this.init()) {
            console.log(`⟳ ${text}`);
            return;
        }
        this.lastSpinnerText = text;
        this.spinner = ora({
            text: chalk.cyan(text),
            color: 'cyan'
        }).start();
    }
    static async updateSpinner(text) {
        if (!await this.init()) {
            console.log(`⟳ ${text}`);
            return;
        }
        if (this.spinner) {
            this.lastSpinnerText = text;
            this.spinner.text = chalk.cyan(text);
        }
    }
    static async stopSpinner(success = true) {
        if (!await this.init())
            return;
        if (this.spinner) {
            if (success) {
                this.spinner.succeed(chalk.green(this.lastSpinnerText));
            }
            else {
                this.spinner.fail(chalk.red(this.lastSpinnerText));
            }
            this.spinner = null;
        }
    }
    static async table(headers, data) {
        if (!await this.init()) {
            console.log(headers.join('\t'));
            data.forEach(row => console.log(row.join('\t')));
            return;
        }
        const table = new Table({
            head: headers.map(h => chalk.cyan(h)),
            style: {
                head: [],
                border: []
            }
        });
        data.forEach(row => table.push(row));
        console.log(table.toString());
    }
    static async section(title, content) {
        if (!await this.init()) {
            console.log(`\n=== ${title} ===`);
            console.log(content);
            console.log('='.repeat(title.length + 8));
            return;
        }
        console.log('\n' + boxen(chalk.bold(title) + '\n\n' + content, {
            padding: 1,
            margin: 1,
            borderStyle: 'double',
            borderColor: 'cyan'
        }));
    }
}
exports.PrettyLogger = PrettyLogger;
PrettyLogger.spinner = null;
PrettyLogger.lastSpinnerText = '';
PrettyLogger.initialized = false;
PrettyLogger.isLoaded = false;
