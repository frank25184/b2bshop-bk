"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LogLevel = void 0;
const pretty_logger_1 = require("./pretty-logger");
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["WARN"] = 2] = "WARN";
    LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
class Logger {
    static getCircularReplacer() {
        const seen = new WeakSet();
        return (key, value) => {
            if (typeof value === "object" && value !== null) {
                if (seen.has(value)) {
                    return "[Circular]";
                }
                seen.add(value);
            }
            return value;
        };
    }
    static formatContext(context) {
        try {
            return JSON.stringify(context, this.getCircularReplacer(), 2);
        }
        catch (error) {
            return String(context);
        }
    }
    static setVerbose(verbose) {
        this.verbose = verbose;
    }
    static setPretty(pretty) {
        this.pretty = pretty;
    }
    static async debug(message, context) {
        if (this.level <= LogLevel.DEBUG && this.verbose) {
            if (this.pretty) {
                await pretty_logger_1.PrettyLogger.info(message, context);
            }
            else {
                console.log(`[DEBUG] ${message}${context ? '\nContext: ' + this.formatContext(context) : ''}`);
            }
        }
    }
    static async info(message, context) {
        if (this.level <= LogLevel.INFO && this.verbose) {
            if (this.pretty) {
                await pretty_logger_1.PrettyLogger.info(message, context);
            }
            else {
                console.log(`[INFO] ${message}${context ? '\nContext: ' + this.formatContext(context) : ''}`);
            }
        }
    }
    static async warn(message, context) {
        if (this.level <= LogLevel.WARN && this.verbose) {
            if (this.pretty) {
                await pretty_logger_1.PrettyLogger.warning(message, context);
            }
            else {
                console.warn(`[WARN] ${message}${context ? '\nContext: ' + this.formatContext(context) : ''}`);
            }
        }
    }
    static async error(message, context) {
        if (this.level <= LogLevel.ERROR) {
            if (this.pretty) {
                await pretty_logger_1.PrettyLogger.error(message, context);
            }
            else {
                console.error(`[ERROR] ${message}${context ? '\nContext: ' + this.formatContext(context) : ''}`);
            }
        }
    }
    static async success(message, data) {
        if (!this.verbose)
            return;
        if (this.pretty) {
            await pretty_logger_1.PrettyLogger.success(message, data);
        }
        else {
            console.log(`✓ ${message}`);
            if (data) {
                console.log(data);
            }
        }
    }
    static async startSpinner(text) {
        if (!this.verbose)
            return;
        if (this.pretty) {
            await pretty_logger_1.PrettyLogger.startSpinner(text);
        }
        else {
            console.log(`⟳ ${text}`);
        }
    }
    static async updateSpinner(text) {
        if (!this.verbose)
            return;
        if (this.pretty) {
            await pretty_logger_1.PrettyLogger.updateSpinner(text);
        }
        else {
            console.log(`⟳ ${text}`);
        }
    }
    static async stopSpinner(success = true) {
        if (!this.verbose)
            return;
        if (this.pretty) {
            await pretty_logger_1.PrettyLogger.stopSpinner(success);
        }
        else {
            // Already logged in startSpinner
        }
    }
    static async table(headers, data) {
        if (!this.verbose)
            return;
        if (this.pretty) {
            await pretty_logger_1.PrettyLogger.table(headers, data);
        }
        else {
            console.log(headers.join('\t'));
            data.forEach(row => console.log(row.join('\t')));
        }
    }
    static async section(title, content) {
        if (!this.verbose)
            return;
        if (this.pretty) {
            await pretty_logger_1.PrettyLogger.section(title, content);
        }
        else {
            console.log(`\n=== ${title} ===`);
            console.log(content);
            console.log('='.repeat(title.length + 8));
        }
    }
}
exports.Logger = Logger;
Logger.level = process.env.LOGLEVEL === 'debug' ? LogLevel.DEBUG : LogLevel.INFO;
Logger.verbose = true;
Logger.pretty = false;
