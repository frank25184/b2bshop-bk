export interface SimpleAgentConfig {
    instructions: string;
    name?: string;
    verbose?: boolean;
    pretty?: boolean;
    llm?: string;
    markdown?: boolean;
    stream?: boolean;
    tools?: any[] | Function[];
    toolFunctions?: Record<string, Function>;
}
export declare class Agent {
    private instructions;
    name: string;
    private verbose;
    private pretty;
    private llm;
    private markdown;
    private stream;
    private llmService;
    private tools?;
    private toolFunctions;
    constructor(config: SimpleAgentConfig);
    private createSystemPrompt;
    /**
     * Register a tool function that can be called by the model
     * @param name Function name
     * @param fn Function implementation
     */
    registerToolFunction(name: string, fn: Function): void;
    /**
     * Check if a tool definition exists for the given function name
     * @param name Function name
     * @returns True if a tool definition exists
     */
    private hasToolDefinition;
    /**
     * Auto-generate a tool definition based on the function
     * @param name Function name
     * @param func Function implementation
     */
    private addAutoGeneratedToolDefinition;
    /**
     * Process tool calls from the model
     * @param toolCalls Tool calls from the model
     * @returns Array of tool results
     */
    private processToolCalls;
    start(prompt: string, previousResult?: string): Promise<string>;
    chat(prompt: string, previousResult?: string): Promise<string>;
    execute(previousResult?: string): Promise<string>;
    getResult(): string | null;
    getInstructions(): string;
}
export interface PraisonAIAgentsConfig {
    agents: Agent[];
    tasks?: string[];
    verbose?: boolean;
    pretty?: boolean;
    process?: 'sequential' | 'parallel';
}
export declare class PraisonAIAgents {
    private agents;
    private tasks;
    private verbose;
    private pretty;
    private process;
    constructor(config: PraisonAIAgentsConfig);
    private generateTasks;
    private executeSequential;
    start(): Promise<string[]>;
    chat(): Promise<string[]>;
}
