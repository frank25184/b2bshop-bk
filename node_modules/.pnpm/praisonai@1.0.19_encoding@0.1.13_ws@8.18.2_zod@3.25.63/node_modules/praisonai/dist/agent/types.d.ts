export interface TaskConfig {
    name: string;
    description: string;
    expected_output: string;
    agent?: any;
    dependencies?: Task[];
}
export declare class Task {
    name: string;
    description: string;
    expected_output: string;
    agent: any;
    dependencies: Task[];
    result: any;
    constructor(config: TaskConfig);
}
export interface TaskAgentConfig {
    name: string;
    role: string;
    goal: string;
    backstory: string;
    verbose?: boolean;
    llm?: string;
    markdown?: boolean;
}
export declare class Agent {
    private name;
    private role;
    private goal;
    private backstory;
    private verbose;
    private llm;
    private markdown;
    private result;
    constructor(config: TaskAgentConfig);
    execute(task: Task, dependencyResults?: any[]): Promise<any>;
}
export interface TaskPraisonAIAgentsConfig {
    agents: Agent[];
    tasks: Task[];
    verbose?: boolean;
    process?: 'sequential' | 'parallel' | 'hierarchical';
    manager_llm?: string;
}
export declare class PraisonAIAgents {
    private agents;
    private tasks;
    private verbose;
    private process;
    private manager_llm;
    constructor(config: TaskPraisonAIAgentsConfig);
    start(): Promise<any[]>;
    private executeSequential;
    private executeHierarchical;
}
export type { TaskAgentConfig as AgentConfig };
