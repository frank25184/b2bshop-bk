import { SimpleAgentConfig } from './simple';
import { TaskAgentConfig } from './types';
import { Task } from './types';
export interface ProxyAgentConfig extends Partial<SimpleAgentConfig>, Partial<TaskAgentConfig> {
    task?: Task;
    tools?: any[];
    toolFunctions?: Record<string, Function>;
}
export declare class Agent {
    private simpleAgent;
    private taskAgent;
    private instructions;
    constructor(config: ProxyAgentConfig);
    getInstructions(): string;
    execute(input: Task | string): Promise<any>;
    start(prompt: string, previousResult?: string): Promise<string>;
    chat(prompt: string, previousResult?: string): Promise<string>;
}
export declare class PraisonAIAgents {
    private simpleImpl;
    private taskImpl;
    constructor(config: any);
    start(): Promise<string[]>;
    chat(): Promise<string[]>;
}
export { Task } from './types';
